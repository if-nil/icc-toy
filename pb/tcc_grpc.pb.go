// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: tcc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceManager_Try_FullMethodName    = "/pb.ResourceManager/Try"
	ResourceManager_Commit_FullMethodName = "/pb.ResourceManager/Commit"
	ResourceManager_Cancel_FullMethodName = "/pb.ResourceManager/Cancel"
)

// ResourceManagerClient is the client API for ResourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceManagerClient interface {
	Try(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (*TryReply, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error)
}

type resourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerClient(cc grpc.ClientConnInterface) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) Try(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (*TryReply, error) {
	out := new(TryReply)
	err := c.cc.Invoke(ctx, ResourceManager_Try_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, ResourceManager_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error) {
	out := new(CancelReply)
	err := c.cc.Invoke(ctx, ResourceManager_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServer is the server API for ResourceManager service.
// All implementations must embed UnimplementedResourceManagerServer
// for forward compatibility
type ResourceManagerServer interface {
	Try(context.Context, *TryRequest) (*TryReply, error)
	Commit(context.Context, *CommitRequest) (*CommitReply, error)
	Cancel(context.Context, *CancelRequest) (*CancelReply, error)
	mustEmbedUnimplementedResourceManagerServer()
}

// UnimplementedResourceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedResourceManagerServer struct {
}

func (UnimplementedResourceManagerServer) Try(context.Context, *TryRequest) (*TryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Try not implemented")
}
func (UnimplementedResourceManagerServer) Commit(context.Context, *CommitRequest) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedResourceManagerServer) Cancel(context.Context, *CancelRequest) (*CancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedResourceManagerServer) mustEmbedUnimplementedResourceManagerServer() {}

// UnsafeResourceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManagerServer will
// result in compilation errors.
type UnsafeResourceManagerServer interface {
	mustEmbedUnimplementedResourceManagerServer()
}

func RegisterResourceManagerServer(s grpc.ServiceRegistrar, srv ResourceManagerServer) {
	s.RegisterService(&ResourceManager_ServiceDesc, srv)
}

func _ResourceManager_Try_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).Try(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManager_Try_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).Try(ctx, req.(*TryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManager_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceManager_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceManager_ServiceDesc is the grpc.ServiceDesc for ResourceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Try",
			Handler:    _ResourceManager_Try_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _ResourceManager_Commit_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ResourceManager_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcc.proto",
}
